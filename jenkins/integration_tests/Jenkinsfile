
pipeline {

	agent { label 'AWS' }

	environment {
        GITHUB_TOKEN = credentials('Github-Token')
    }

	stages {
		stage ('Build Docker Containers') {
			steps {
				script {
					dockerPHPContainerId = null
					dockerSeleniumContainerId = null
				}
				
				// make sure there aren't any already existing containers
            	sh 'docker compose -f jenkins/integration_tests/compose.yaml rm -f'
            	sh 'docker compose -f jenkins/integration_tests/compose.yaml up --force-recreate --build --wait'
            	// wait for the script to install wordpress
            	// TODO: remove the sleep and implement polling until the container is stopped?
            	sh "sleep 60"
			}
		}

		stage ('Create PHP Container') {
			steps {
				script {
					// have to do this instead of using a docker agent as it needs to run on the same agent
					// using a docker agent in this step seems to use another agent completly rather than
					// a docker container within the pipeline agent
					dockerPHPImageId = sh(returnStdout: true, script: 'docker build -f jenkins/dockerfile . -q').trim()
					dockerPHPContainerId = sh(returnStdout: true, script: "docker container run -d --network=host ${dockerPHPImageId} tail -f /dev/null").trim()
				}
			}
		}

		stage ('Install Vendor') {
			steps {
	            // no-cache because the container fails to create directories when cloning
	            // from git eg:
	            // could not create leading directories of 
	            // '/.composer/cache/vcs/https ---github.com-bovigo-vfsStream.git'
				sh "docker exec ${dockerPHPContainerId} /bin/sh -c 'cd /usr/src/odoo_conn; composer install --no-cache'"
			}
		}

        stage ('Endpoint Tests') {
            steps {
                sh "docker exec ${dockerPHPContainerId} /bin/sh -c 'cd /usr/src/odoo_conn; vendor/bin/phpunit jenkins/integration_tests/tests/endpoint_tests'"
            }
        }

        stage ('Selenium Tests') {
        	steps {
        		script {
        			dockerSeleniumContainerId = sh(
        				returnStdout: true, script: "docker run -d --rm -it --network host --shm-size 2g selenium/standalone-chrome"
        			).trim()
        		}
        		sh 'docker compose -f jenkins/integration_tests/odoo_compose.yaml rm -f'
        		sh 'docker compose -f jenkins/integration_tests/odoo_compose.yaml up --force-recreate --build --wait'
        		
        		// wait for the chrome driver and odoo to be running
        		sh "sleep 20"
        		sh "docker exec ${dockerPHPContainerId} /bin/sh -c 'cd /usr/src/odoo_conn; vendor/bin/phpunit jenkins/integration_tests/tests/selenium_tests/Create_Test.php'"
        		sh "docker exec ${dockerPHPContainerId} /bin/sh -c 'cd /usr/src/odoo_conn; vendor/bin/phpunit jenkins/integration_tests/tests/selenium_tests/SendData_Test.php'"
        		sh "docker exec ${dockerPHPContainerId} /bin/sh -c 'cd /usr/src/odoo_conn; vendor/bin/phpunit jenkins/integration_tests/tests/selenium_tests/Update_Test.php'"
        		sh "docker exec ${dockerPHPContainerId} /bin/sh -c 'cd /usr/src/odoo_conn; vendor/bin/phpunit jenkins/integration_tests/tests/selenium_tests/Delete_Test.php'"
        	}
        }
	}

	post { 
        always {
        	sh 'docker compose -f jenkins/integration_tests/odoo_compose.yaml down'
        	sh 'docker compose -f jenkins/integration_tests/odoo_compose.yaml rm -f'
        	sh 'docker compose --project-directory jenkins/integration_tests down'
        	sh 'docker compose --project-directory jenkins/integration_tests rm -f'
        	script {
        		if (dockerPHPContainerId) {
        			sh(script: "docker container rm --force ${dockerPHPContainerId}")
        		}
        		if (dockerSeleniumContainerId) {
        			sh(script: "docker container rm --force ${dockerSeleniumContainerId}")
        		}
        	}

            // Reduce the amount of storage used by the docker containers
            // Keep the images as it would reap the rewards from the speed increase from not having to download them again
            sh 'docker container prune -f'
            sh 'docker volume prune -f'

            sh "curl \
                -X POST \
                -H \"Accept: application/vnd.github+json\" \
                -H \"Authorization: Bearer $GITHUB_TOKEN\" \
                https://api.github.com/repos/jack-dane/odoo-wp-plugin/statuses/$GIT_COMMIT \
                -d \'{\"state\":\"${currentBuild.result.toLowerCase()}\",\"context\":\"Jenkins Integration Tests\"}\'"
        }
    }

}